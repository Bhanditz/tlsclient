This is a testing certificate generated by the following Go program:

package main

import (
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"os"
	"time"
)

func main() {
	urandom, err := os.Open("/dev/urandom", os.O_RDONLY, 0)
	if err != nil {
		fmt.Printf("failed to open /dev/urandom\n")
		return
	}

	block, _ := pem.Decode([]byte(pemPrivateKey))
	priv, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	if err != nil {
		fmt.Printf("Failed to parse private key: %s", err)
		return
	}

	template := x509.Certificate{
		SerialNumber: []byte{1},
		Subject: x509.Name{
			CommonName:   "tlsclient.example.com",
			Organization: "Acme Co",
		},
		NotBefore: time.SecondsToUTC(1000),
		NotAfter:  time.SecondsToUTC(100000),

		SubjectKeyId: []byte{1, 2, 3, 4},
		KeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,

		DNSNames: []string{"tlsclient.example.com"},
	}

	derBytes, err := x509.CreateCertificate(urandom, &template, &template, priv)
	if err != nil {
		fmt.Printf("Failed to create certificate: %s", err)
		return
	}

	pem.Encode(os.Stdout, &pem.Block{Type: "CERTIFICATE", Bytes: derBytes})
}

var pemPrivateKey = `-----BEGIN RSA PRIVATE KEY-----
MIIBOgIBAAJBALKZD0nEffqM1ACuak0bijtqE2QrI/KLADv7l3kK3ppMyCuLKoF0
fd7Ai2KW5ToIwzFofvJcS/STa6HA5gQenRUCAwEAAQJBAIq9amn00aS0h/CrjXqu
/ThglAXJmZhOMPVn4eiu7/ROixi9sex436MaVeMqSNf7Ex9a8fRNfWss7Sqd9eWu
RTUCIQDasvGASLqmjeffBNLTXV2A5g4t+kLVCpsEIZAycV5GswIhANEPLmax0ME/
EO+ZJ79TJKN5yiGBRsv5yvx5UiHxajEXAiAhAol5N4EUyq6I9w1rYdhPMGpLfk7A
IU2snfRJ6Nq2CQIgFrPsWRCkV+gOYcajD17rEqmuLrdIRexpg8N1DOSXoJ8CIGlS
tAboUGBxTDq3ZroNism3DaMIbKPyYrAqhKov1h5V
-----END RSA PRIVATE KEY-----
`


-----BEGIN CERTIFICATE-----
MIIBojCCAU6gAwIBAwIBATALBgkqhkiG9w0BAQUwMjEQMA4GA1UEChMHQWNtZSBD
bzEeMBwGA1UEAxMVdGxzY2xpZW50LmV4YW1wbGUuY29tMB4XDTcwMDEwMTAwMTY0
MFoXDTcwMDEwMjAzNDY0MFowMjEQMA4GA1UEChMHQWNtZSBDbzEeMBwGA1UEAxMV
dGxzY2xpZW50LmV4YW1wbGUuY29tMFkwCwYJKoZIhvcNAQEBA0oAMEcCQLKZD0nE
ffqM1ACuak0bijtqE2QrI/KLADv7l3kK3ppMyCuLKoF0fd7Ai2KW5ToIwzFofvJc
S/STa6HA5gQenRUCAwEAAaNUMFIwDgYDVR0PAQEBBAQDAgCgMA0GA1UdDgQGBAQB
AgMEMA8GA1UdIwQIMAaABAECAwQwIAYDVR0RBBkwF4IVdGxzY2xpZW50LmV4YW1w
bGUuY29tMAsGCSqGSIb3DQEBBQNBAAKqdh4T3Jr3GATkLBXHunWh5yDxrCdytMqU
jceI8eTWSAcJLodijTcP0QByxadH5RemmxnCK4TWs61CJrB9Ups=
-----END CERTIFICATE-----
